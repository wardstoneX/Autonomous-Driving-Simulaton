/**
 * Main CAmkES configuration file of the exercise demo application.
 *
 * Copyright (C) 2021-2023, Hensoldt Cyber GmbH
 */

import <std_connector.camkes>;

#include "system_config.h"
#include "components/SecureCommunication/SecureCommunication.camkes"

//----------------------------------------------------------------------
// TimeServer
//----------------------------------------------------------------------

#include "TimeServer/camkes/TimeServer.camkes"
TimeServer_COMPONENT_DEFINE(TimeServer)

//----------------------------------------------------------------------
// Storage
//----------------------------------------------------------------------

#include "RPi_SPI_Flash/RPi_SPI_Flash.camkes"
RPi_SPI_Flash_COMPONENT_DEFINE(RPi_SPI_Flash)
RPi_SPI_Flash_HW_COMPONENT_DEFINE(RPi_SPI_Flash_HW)

#include "StorageServer/camkes/StorageServer.camkes"
StorageServer_COMPONENT_DEFINE(StorageServer)

//----------------------------------------------------------------------
// Network
//----------------------------------------------------------------------

#include "plat_nic.camkes"

//----------------------------------------------------------------------
// Network Stack
//----------------------------------------------------------------------

#include "NetworkStack_PicoTcp/camkes/NetworkStack_PicoTcp.camkes"

NetworkStack_PicoTcp_COMPONENT_DEFINE(
    NetworkStack_PicoTcp,
    NIC_DRIVER_RINGBUFFER_SIZE,
    NetworkStack_PicoTcp_NO_ADDITIONAL_INTERFACES)

//----------------------------------------------------------------------
// Entropy Source
//----------------------------------------------------------------------

#include "EntropySource/camkes/EntropySource.camkes"
EntropySource_COMPONENT_DEFINE(EntropySource)

#include "components/TestApp/TestApp.camkes"

//----------------------------------------------------------------------
// System
//----------------------------------------------------------------------

assembly {
    composition {
        //----------------------------------------------------------------------
        // Storage
        //----------------------------------------------------------------------
        component   RPi_SPI_Flash       flash;
        component   RPi_SPI_Flash_HW    flash_hw;

        RPi_SPI_Flash_INSTANCE_CONNECT(
            flash,
            flash_hw
        )

        //----------------------------------------------------------------------
        // StorageServer
        //----------------------------------------------------------------------
        component   StorageServer       storageServer;

        StorageServer_INSTANCE_CONNECT(
            storageServer,
            flash.storage_rpc, flash.storage_port
        )

        StorageServer_INSTANCE_CONNECT_CLIENTS(
            storageServer,
            testApp.storage_rpc_1, testApp.storage_dp_1,
            testApp.storage_rpc_2, testApp.storage_dp_2
        )

        //----------------------------------------------------------------------
        // TimeServer
        //----------------------------------------------------------------------
        component TimeServer timeServer;

        TimeServer_INSTANCE_CONNECT_CLIENTS(
            timeServer,
            flash.timeServer_rpc, flash.timeServer_notify,
            EXERCISE_DEMO_NIC_CONNECTION_TIMESERVER(nwDriver)
            nwStack.timeServer_rpc, nwStack.timeServer_notify
        )

        //----------------------------------------------------------------------
        // Network Driver
        //----------------------------------------------------------------------
        EXERCISE_DEMO_NIC_INSTANCE(nwDriver)

        //----------------------------------------------------------------------
        // Network Stack
        //----------------------------------------------------------------------
        component NetworkStack_PicoTcp    nwStack;

        NetworkStack_PicoTcp_INSTANCE_CONNECT(
            nwStack,
            nwDriver
        )

        //----------------------------------------------------------------------
        // EntropySource
        //----------------------------------------------------------------------
        component EntropySource entropySource;

        EntropySource_INSTANCE_CONNECT_CLIENT(
            entropySource,
            secureComm.entropy_rpc,
            secureComm.entropy_dp)

        //----------------------------------------------------------------------
        // Demo Component (using File System)
        //----------------------------------------------------------------------
        

        NetworkStack_PicoTcp_INSTANCE_CONNECT_CLIENTS(
            nwStack,
            secureComm, networkStack
        )

        
        IF_OS_SOCKET_CONNECT(
            secureComm, secureCommunication,
            testApp, secureCommunication,
            1
        )
        

        /*
        NetworkStack_PicoTcp_INSTANCE_CONNECT_CLIENTS(
            secureComm,
            testApp, secureCommunication
        )
        */

        component   TestApp      testApp;
        component   SecureCommunication     secureComm;

        /*
        connection  seL4RPCCall rpc(from testApp.secureCommunication_sc_rpc, to secureComm.sc_rcp);
        connection  seL4SharedData  shareMem(from secureComm.sc_dp, to testApp.secureCommunication_sc_dp);
        */
    }

    configuration {

        StorageServer_INSTANCE_CONFIGURE_CLIENTS(
            storageServer,
            FILESYSTEM_1_STORAGE_OFFSET, FILESYSTEM_1_STORAGE_SIZE,
            FILESYSTEM_2_STORAGE_OFFSET, FILESYSTEM_2_STORAGE_SIZE
        )

        StorageServer_CLIENT_ASSIGN_BADGES(
            testApp.storage_rpc_1,
            testApp.storage_rpc_2
        )

        TimeServer_CLIENT_ASSIGN_BADGES(
            flash.timeServer_rpc,
            EXERCISE_DEMO_NIC_TIMESERVER_CLIENTS(nwDriver)
            nwStack.timeServer_rpc
        )

        RPi_SPI_Flash_HW_INSTANCE_CONFIGURE_SELF(
            flash_hw
        )

        EXERCISE_DEMO_NIC_CONFIG(nwDriver)

        NetworkStack_PicoTcp_CLIENT_ASSIGN_BADGES(
            secureComm, networkStack
        )

        NetworkStack_PicoTcp_INSTANCE_CONFIGURE_CLIENTS(
            nwStack,
            2
        )
    }
}